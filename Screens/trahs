import { StatusBar } from 'expo-status-bar';
import React, { useState } from 'react';
import {  Dimensions  } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { createDrawerNavigator } from '@react-navigation/drawer';
import * as Font from 'expo-font';
import Home from './Screens/main';
import Drawerscreen from './Screens/drawer';
import Monthscreen from './Screens/monthscreen';
import Login from './Screens/login';
import Exam from './Screens/exam';
import Exam7 from './Screens/exam7';
import Result from './Screens/resultscreen';
import Result7 from './Screens/resultscreen7';
import Profile from './Screens/profile';
import Settings from './Screens/settings';
import News from './Screens/news';
import Competition from './Screens/competition';
import Prefering from './Screens/apploading';
import Aboutus from './Screens/aboutus';
import Phone from './Screens/phone';
import { AppLoading } from 'expo';
import * as SQLite from 'expo-sqlite'
const db=SQLite.openDatabase('dicbase.db')
const Stack = createStackNavigator();
const MainStackNavigator =  (navigation ) => {
  return (
    
    <Stack.Navigator initialRouteName={'Main'} >     
       <Stack.Screen name="Main" component={Home}   options={({navigation})=>({ 
         headerShown:null
      
        })}/>
        <Stack.Screen name="Month"  component={Monthscreen}  options={({navigation})=>({ 
         headerShown:null
      
        })}/>
        <Stack.Screen name="Exam"  component={Exam} options={({navigation})=>({ 
         headerShown:null
      
        })}/>
         <Stack.Screen name="Exam7"  component={Exam7} options={({navigation})=>({ 
         headerShown:null
      
        })}/>
         <Stack.Screen name="Result"  component={Result}  options={({navigation})=>({ 
         headerShown:null
      
        })}/>
        <Stack.Screen name="Result7"  component={Result7} options={({navigation})=>({ 
         headerShown:null
      
        })}/>
    </Stack.Navigator>
  );
}
/////////////////////////////////////////////////////////////////////////
const SideStack = createStackNavigator();
const NewsStack = createStackNavigator();
const NewsStackNav =  (navigation ) => {
  return (  
    <NewsStack.Navigator initialRouteName={'News'} >     
       {/* <Stack.Screen name="Competition" component={Competition}   options={({navigation})=>({ 
         headerShown:null     
        })}/> */}
        <Stack.Screen name="News"  component={News}  options={({navigation})=>({ 
         headerShown:null     
        })}/>
    </NewsStack.Navigator>
  );
}
const Drawer = createDrawerNavigator();
const DrawerStack =  (navigation ) => {
  return (   
    <Drawer.Navigator   drawerStyle={{backgroundColor:'#fff',width:Dimensions.get('window').width/1.6}}  drawerContent={(props) => <Drawerscreen {...props} />}  drawerType={Dimensions.width >= 768 ? 'permanent' : 'front'} >  

        <Drawer.Screen name="Home"  component={MainStackNavigator} />
        <Drawer.Screen name="Profile"  component={Profile} />
        <Drawer.Screen name="Settings"  component={Settings} />
        <Drawer.Screen name="Competition"  component={NewsStackNav} />
        <Drawer.Screen name="Aboutus"  component={Aboutus} />
        <Drawer.Screen name="phone"  component={Phone} />
    </Drawer.Navigator>
  );
}
export default function App(props) {
  const [apploading, setApploading] = useState(true)
  if(apploading)
    return (
      <AppLoading
      startAsync={loadResourcesAsync}
      onError={handleLoadingError}
      onFinish={() => handleFinishLoading(setApploading)}
      />)
  else
  return (
  
         <NavigationContainer>
            <SideStack.Navigator initialRouteName={'Apploading'}>
              <SideStack.Screen name="Apploading"  component={Prefering} />
              <SideStack.Screen name="Login"  component={Login} 
              options={{
                headerShown:null
              }}
              />
              <SideStack.Screen name="Drawer"  component={DrawerStack} 
              options={{
                headerShown:null
              }}
               />
            </SideStack.Navigator>
        </NavigationContainer>
 
 
  );
}  

async function loadResourcesAsync() {
  await Font.loadAsync({
    'myfont': require('./assets/fonts/ROBOTO-REGULAR.ttf'),
  }),
  db.transaction(tx => {
    tx.executeSql(
      'CREATE TABLE IF NOT EXISTS  D03(D0300 integer, D0301 text, D0302 text,D0303 text,D0304 text,D0305 text,D0306 text,D0307 integer);'
  ,[],(tx,res)=>{
       
        })
        })
 db.transaction(tx => {
          tx.executeSql(
            'CREATE TABLE IF NOT EXISTS  dayscore2(date text,score integer,scorecolor text);'
        ,[],(tx,res)=>{          
        })
  })  
  db.transaction(tx => {
    tx.executeSql(
      'CREATE TABLE IF NOT EXISTS  medee(title text,newstext text,topimage text,date text,videourl text,newsid integer);'
      ,[]
      ,(tx,res)=>{
          
        }
      ,(tx,res)=>{console.log(res)}
      )
       }
       )   
  db.transaction(tx => {
        tx.executeSql(
          'CREATE TABLE IF NOT EXISTS  companyinfo(mail text,facebookurl text,address text,about text,phone text,futureadd text);'
          ,[]
          ,(tx,res)=>{
               
            }
          ,(tx,res)=>{console.log(res)}
                )
           }
           )    
  }

function handleLoadingError(error) {
  
}

function handleFinishLoading(setApploading) {
  setApploading(false);
}
